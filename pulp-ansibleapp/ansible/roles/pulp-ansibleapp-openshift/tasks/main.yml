- name: oc login
  shell: "oc login {{ openshift_target }} -u '{{ openshift_user }}' -p '{{ openshift_pass }}' --insecure-skip-tls-verify=true"

- name: check if namespace exists
  shell: "oc get project --no-headers=true | awk '{ print $1}' | grep -w {{ namespace }} | cat"
  register: project

- name: create namespace if it does not
  shell: "oc new-project {{ namespace }}"
  when: project.stdout.find("{{ namespace }}") == -1

- name: clone pulp-k8s
  shell: "git clone https://github.com/mhrivnak/pulp-k8s"

- name: create pulp pvc resource template
  template:
    src: vlp.yaml.j2
    dest: /tmp/vlp.yaml

- name: create qpidd pvc resource template
  template:
    src: vlq.yaml.j2
    dest: /tmp/vlq.yaml

- name: create mongodb pvc resource template
  template:
    src: vlm.yaml.j2
    dest: /tmp/vlm.yaml

- name: create pulp pvc
  shell: "oc -n {{ namespace }} create -f /tmp/vlp.yaml"

- name: create qpidd pvc
  shell: "oc -n {{ namespace }} create -f /tmp/vlq.yaml"

- name: create mongodb pvc
  shell: "oc -n {{ namespace }} create -f /tmp/vlm.yaml"

- name: update server.conf
  template:
    src: server.conf.j2
    dest: pulp-k8s/secrets/server.conf

- name: make certs
  shell: "./make-certs.sh"
  args: 
    chdir: pulp-k8s/secrets

- name: gen key pair
  shell: "./pulp-gen-key-pair"
  args: 
    chdir: pulp-k8s/secrets
 
- name: create pulp-config secret
  shell: oc -n {{ namespace }} create secret generic pulp-config --from-file=server.conf --from-file=certs/rsa.key --from-file=certs/rsa_pub.key
  args:
    chdir: pulp-k8s/secrets

- name: create httpd-certs secret
  shell: oc -n {{ namespace }} create secret generic httpd-certs --from-file=httpd.key --from-file=httpd.crt --from-file=auth-ca.crt --from-file=auth-ca.key
  args:
    chdir: pulp-k8s/secrets/certs

- name: create mongodb-cert secret
  shell: oc -n {{ namespace }} create secret generic mongodb-cert --from-file=mongodb.pem
  args:
    chdir: pulp-k8s/secrets/certs

- name: create client-cert secret
  shell: oc -n {{ namespace }} create secret generic client-cert --from-file=client.pem --from-file=client.crt --from-file=client.key
  args:
    chdir: pulp-k8s/secrets/certs

- name: create qpiddb secret
  shell: oc -n {{ namespace }} create secret generic qpiddb --from-file=qpiddb/nss
  args:
    chdir: pulp-k8s/secrets

- name: create pulp-ca configmap
  shell: oc -n {{ namespace }} create configmap pulp-ca --from-file=certs/ca.crt
  args:
    chdir: pulp-k8s/secrets

- name: create mongodb pod
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/mongo.yaml"

- name: create qpidd pod
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/qpid.yaml"

- name: wait for mongodb container to be running
  shell: "oc -n {{ namespace }} get pods --no-headers=true | grep ^mongodb | cat"
  register: mongo_start 
  until: "'Running' in mongo_start.stdout"
  retries: 24
  delay: 5

- name: wait for qpidd container to be running
  shell: "oc -n {{ namespace }} get pods --no-headers=true | grep ^qpidd | cat"
  register: qpidd_start
  until: "'Running' in qpidd_start.stdout"
  retries: 24
  delay: 5

- name: run setup
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/setup.yaml"

- name: wait for setup container to be complete
  shell: "oc -n {{ namespace }} get pods --no-headers=true | grep -w ^setup | cat"
  register: setup
  until: "'Completed' in setup.stdout"
  retries: 24
  delay: 5

- name: run manage
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/manage.yaml"

- name: wait for setup container to be complete
  shell: "oc -n {{ namespace }} get pods --no-headers=true | grep -w ^manage | cat"
  register: setup
  until: "'Completed' in setup.stdout"
  retries: 24
  delay: 5

- name: create celerybeat pod
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/celerybeat.yaml"

- name: create httpd pod
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/httpd.yaml"

- name: create worker pod
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/worker.yaml"

- name: create resource_manager pod
  shell: "oc -n {{ namespace }} create -f {{ role_path }}/files/resource_manager.yaml"
