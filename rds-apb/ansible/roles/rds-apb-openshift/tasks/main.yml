- set_fact:
    tds: "{{ ansible_date_time.epoch }}"

- rds:
    command: create
    backup_retention: "{{ backup_retention }}"
    instance_name: "{{ ansible_user_id }}-{{ db_engine }}-{{ tds }}"
    region: "{{ region }}"
    wait: yes
    wait_timeout: 1200
    db_engine: "{{ db_engine }}"
    size: "{{ db_size }}"
    instance_type: "{{ instance_type }}"
    username: "{{ db_username }}"
    password: "{{ db_password }}"
    db_name: "{{ db_name }}"
    port: "{{ port }}"
    vpc_security_groups: "{{ vpc_security_groups }}"
    publicly_accessible: yes
    subnet: default-vpc-f0547f96
    tags:
      Application: jmontleo-test-ansible
      Description: "{{ ansible_user_id }} RDS {{ db_engine }} {{ tds }}"
  register: rds

- name: retrieve rds endpoint IP
  shell: "dig +short {{ rds.instance.endpoint }} | tail -n 1"
  register: rds_endpoint_ip

- name: openshift login
  shell: "oc login {{ openshift_target }} -u '{{ openshift_user }}' -p '{{ openshift_pass }}' --insecure-skip-tls-verify=true"

- name: check if namespace exists
  shell: "oc get project --no-headers=true | awk '{ print $1}' | grep -E '^{{ namespace }}( |$)' | cat"
  register: project

- name: create namespace if it does not
  shell: "oc new-project {{ namespace }}"
  when: project.stdout.find( "{{ namespace }}" ) == -1

- name: render openshift endpoint template
  template:
    src: endpoint.yml.j2
    dest: /tmp/endpoint.yml

- name: render openshift service template
  template:
    src: service.yml.j2
    dest: /tmp/service.yml

- name: create openshift endpoint
  shell: "oc create -n {{ namespace }} -f /tmp/endpoint.yml"

- name: create openshift service
  shell: "oc create -n {{ namespace }} -f /tmp/service.yml"

- name: retrieve openshift endpoint ip
  shell: "oc get svc rds-{{ tds }} --no-headers=true | awk '{ print $2 }'"
  register: endpoint_ip

- name: encode bind credentials
  shell: 'echo "{\"hostname\": \"{{ endpoint_ip.stdout }}\", \"port\": \"{{ port }}\", \"username\": \"{{ db_username }}\", \"password\": \"{{ db_password }}\", \"db_name\": \"{{ db_name }}\"}" | base64 -w 0'
  register: encoded_bind_credentials

- debug:
    msg: "<BIND_CREDENTIALS>{{ encoded_bind_credentials.stdout }}</BIND_CREDENTIALS>"
